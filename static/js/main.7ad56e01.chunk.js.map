{"version":3,"sources":["components/TodoApp.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["TodoApp","setTodoList","useState","todo","setTodo","onSubmit","event","preventDefault","prevTodos","id","Date","title","trimRight","completed","type","className","placeholder","value","onChange","target","trimLeft","TodoItem","item","todoList","status","setStatus","useEffect","checked","map","onClick","itemId","filter","TodoList","filteredTodos","key","TodosFilter","setFilter","FILTERS","href","cn","selected","all","active","App","toggleAll","setToggleAll","useMemo","notCompleted","length","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ad56e01.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = ({ setTodoList }) => {\n  const [todo, setTodo] = useState('');\n\n  const addTodo = () => {\n    if (!todo) {\n      return;\n    }\n\n    setTodoList(prevTodos => (\n      [\n        ...prevTodos,\n        {\n          id: +new Date(),\n          title: todo.trimRight(),\n          completed: false,\n        },\n      ]\n    ));\n    setTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        addTodo();\n      }}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todo}\n        onChange={event => setTodo(event.target.value.trimLeft())}\n      />\n    </form>\n  );\n};\n\nTodoApp.propTypes = {\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  item,\n  todoList,\n  setTodoList,\n}) => {\n  const [status, setStatus] = useState(item.completed);\n\n  const changeStatus = () => {\n    setTodoList(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === item.id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n    setStatus(!status);\n  };\n\n  const deleteTodo = (itemId) => {\n    setTodoList(todoList.filter(todo => todo.id !== itemId));\n  };\n\n  useEffect(() => {\n    setStatus(item.completed);\n    setTodoList([...todoList]);\n  }, [item.completed]);\n\n  return (\n    <li\n      className={status ? 'completed' : ''}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={status}\n          onChange={changeStatus}\n        />\n        <label>\n          {item.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(item.id)}\n        />\n      </div>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  item: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todoList,\n  setTodoList,\n  filteredTodos,\n}) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        todoList={todoList}\n        setTodoList={setTodoList}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({\n  filter,\n  setFilter,\n  FILTERS,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={cn({ selected: filter === FILTERS.all })}\n        onClick={() => setFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={cn({ selected: filter === FILTERS.active })}\n        onClick={() => setFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={cn({ selected: filter === FILTERS.completed })}\n        onClick={() => setFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  FILTERS: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  const filteredTodos = useMemo(() => todoList.filter((todo) => {\n    switch (filter) {\n      case FILTERS.active:\n        return todo.completed === false;\n      case FILTERS.completed:\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  }), [filter, todoList]);\n\n  const changeToggleAll = () => {\n    setTodoList(\n      todoList.map(todo => ({\n        ...todo,\n        completed: !toggleAll,\n      })),\n    );\n  };\n\n  const notCompleted = todoList.filter(todo => !todo.completed);\n\n  useEffect(() => {\n    if (notCompleted.length === 0) {\n      setToggleAll(true);\n    } else {\n      setToggleAll(false);\n    }\n  }, [notCompleted]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <TodoApp setTodoList={setTodoList} />\n      </header>\n\n      {!!todoList.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={toggleAll}\n              onChange={changeToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              todoList={todoList}\n              setTodoList={setTodoList}\n              filteredTodos={filteredTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {notCompleted.length}\n              {notCompleted.length > 1 || notCompleted.length === 0\n                ? ' todos left'\n                : ' todo left'}\n            </span>\n\n            <TodosFilter\n              filter={filter}\n              setFilter={setFilter}\n              FILTERS={FILTERS}\n            />\n\n            {notCompleted.length !== todoList.length && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodoList(notCompleted)}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}