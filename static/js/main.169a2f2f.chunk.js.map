{"version":3,"sources":["components/TodoApp.jsx","components/TodoItem.jsx","components/TodoList.jsx","constants.js","components/TodosFilter.jsx","App.js","index.js"],"names":["TodoApp","setTodoList","useState","todo","setTodo","onSubmit","event","preventDefault","prevTodos","id","Date","title","trimRight","completed","type","className","placeholder","value","onChange","target","trimLeft","TodoItem","item","todoList","status","setStatus","todoText","setTodoText","editing","setEditing","deleteTodo","itemId","filter","handleBlur","trim","map","useEffect","cn","checked","onDoubleClick","onClick","autoFocus","onKeyDown","key","onBlur","TodoList","filteredTodos","FILTERS","TodosFilter","setFilter","href","selected","App","toggleAll","setToggleAll","useMemo","notCompletedTodos","length","localStorage","JSON","parse","getItem","setItem","stringify","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.169a2f2f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = ({ setTodoList }) => {\n  const [todo, setTodo] = useState('');\n\n  const addTodo = () => {\n    if (!todo) {\n      return;\n    }\n\n    setTodoList(prevTodos => (\n      [\n        ...prevTodos,\n        {\n          id: +new Date(),\n          title: todo.trimRight(),\n          completed: false,\n        },\n      ]\n    ));\n    setTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        addTodo();\n      }}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todo}\n        onChange={event => setTodo(event.target.value.trimLeft())}\n      />\n    </form>\n  );\n};\n\nTodoApp.propTypes = {\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoItem = ({\n  item,\n  todoList,\n  setTodoList,\n}) => {\n  const [status, setStatus] = useState(item.completed);\n  const [todoText, setTodoText] = useState(item.title);\n  const [editing, setEditing] = useState(false);\n\n  const changeStatus = () => {\n    setTodoList(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === item.id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n    setStatus(!status);\n  };\n\n  const deleteTodo = (itemId) => {\n    setTodoList(todoList.filter(todo => todo.id !== itemId));\n  };\n\n  const handleKeyDown = (key) => {\n    if (key === 'Escape') {\n      setTodoText(item.title);\n      setEditing(false);\n    }\n\n    if (key === 'Enter') {\n      handleBlur();\n    }\n  };\n\n  const handleBlur = () => {\n    if (!todoText) {\n      deleteTodo(item.id);\n      setEditing(false);\n    } else {\n      setTodoText(todoText.trim());\n      setTodoList(prevTodos => prevTodos.map((todo) => {\n        if (todo.id === item.id) {\n          return {\n            ...todo,\n            title: todoText,\n          };\n        }\n\n        return todo;\n      }));\n\n      setEditing(false);\n    }\n  };\n\n  useEffect(() => {\n    setStatus(item.completed);\n    setTodoList([...todoList]);\n  }, [item.completed]);\n\n  return (\n    <li className={cn({\n      completed: status,\n      editing,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={status}\n          onChange={changeStatus}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {item.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(item.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={todoText}\n          onChange={event => setTodoText(event.target.value.trimLeft())}\n          onKeyDown={event => handleKeyDown(event.key)}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  item: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todoList,\n  setTodoList,\n  filteredTodos,\n}) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        todoList={todoList}\n        setTodoList={setTodoList}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from '../constants';\n\nexport const TodosFilter = ({\n  filter,\n  setFilter,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={cn({ selected: filter === FILTERS.all })}\n        onClick={() => setFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={cn({ selected: filter === FILTERS.active })}\n        onClick={() => setFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={cn({ selected: filter === FILTERS.completed })}\n        onClick={() => setFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { FILTERS } from './constants';\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  const filteredTodos = useMemo(() => todoList.filter((todo) => {\n    switch (filter) {\n      case FILTERS.active:\n        return todo.completed === false;\n      case FILTERS.completed:\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  }), [filter, todoList]);\n\n  const changeToggleAll = () => {\n    setTodoList(\n      todoList.map(todo => ({\n        ...todo,\n        completed: !toggleAll,\n      })),\n    );\n  };\n\n  const notCompletedTodos = useMemo(() => (\n    todoList.filter(todo => !todo.completed)\n  ));\n\n  useEffect(() => {\n    if (notCompletedTodos.length === 0) {\n      setToggleAll(true);\n    } else {\n      setToggleAll(false);\n    }\n  }, [notCompletedTodos]);\n\n  useEffect(() => {\n    if (localStorage.todoList) {\n      setTodoList(JSON.parse(localStorage.getItem('todoList')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todoList', JSON.stringify(todoList));\n  }, [todoList]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <TodoApp setTodoList={setTodoList} />\n      </header>\n\n      {todoList.length !== 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={toggleAll}\n              onChange={changeToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              todoList={todoList}\n              setTodoList={setTodoList}\n              filteredTodos={filteredTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {notCompletedTodos.length}\n              {notCompletedTodos.length > 1 || notCompletedTodos.length === 0\n                ? ' todos left'\n                : ' todo left'}\n            </span>\n\n            <TodosFilter\n              filter={filter}\n              setFilter={setFilter}\n            />\n\n            {notCompletedTodos.length !== todoList.length && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodoList(notCompletedTodos)}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}